// <auto-generated />
using System;
using Labbeh.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Labbeh.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Labbeh.Models.Answer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("AnswerTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.Branches", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrgsSubID")
                        .HasColumnType("int");

                    b.Property<string>("latitude")
                        .HasColumnType("nvarrchar(max)");

                    b.Property<string>("longtitude")
                        .HasColumnType("nvarrchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrgsSubID");

                    b.ToTable("Branche", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.BranchSubOrgsContract", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("ContractID")
                        .HasColumnType("int");

                    b.Property<decimal>("GenerationFees")
                        .HasColumnType("decimal(13,2)");

                    b.Property<int>("OrgsSubID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("BranchId");

                    b.HasIndex("ContractID");

                    b.HasIndex("OrgsSubID");

                    b.ToTable("BranchsSubOrgsContract", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.Commision", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<decimal>("Commisionamount")
                        .HasColumnType("decimal(13,2)");

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentWayID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContactID");

                    b.HasIndex("PaymentWayID");

                    b.ToTable("Commisions", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.Contract", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(13,2)");

                    b.Property<string>("DateFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrgsSubIdRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrgsSubIdRef");

                    b.ToTable("Contracts", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.ContractCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("ConractCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ContractCategorie", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.ContractCCat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ContactCatID")
                        .HasColumnType("int");

                    b.Property<int>("ContractID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContactCatID");

                    b.HasIndex("ContractID");

                    b.ToTable("ContractsCCat", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.CustomerCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CategoyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CustomersCategory", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.CustomerCusCat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CurrentDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerCatID")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CustomerCatID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomersCusCat", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.Customers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("CustomerCode")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LatitudeDefault")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LongtitudeDefault")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Custome", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.DriverCompany", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DriverCompCatID")
                        .HasColumnType("int");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DriverCompCatID");

                    b.ToTable("DriversCompany", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.DriverCompContract", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("DateFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("DateTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("DriverCompID")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Phone2")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("ID");

                    b.HasIndex("DriverCompID");

                    b.ToTable("DriversCompContract", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.DriverContractEvaluate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("CurrentDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DriveContractID")
                        .HasColumnType("int");

                    b.Property<int>("QEvaluateID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DriveContractID");

                    b.HasIndex("QEvaluateID");

                    b.ToTable("DriversContractEvaluate", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.Drivers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("DriverCode")
                        .HasColumnType("int");

                    b.Property<int>("DriverCompanyId")
                        .HasColumnType("int");

                    b.Property<string>("DriverEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("DriverPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("DriverTTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LatitudeDefault")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("LongtitudeDefault")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("ID");

                    b.HasIndex("DriverCompanyId");

                    b.HasIndex("DriverTTypeId");

                    b.ToTable("Driver", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.DriversCompaniesCat", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("CompaniesType")
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("ID");

                    b.ToTable("DriverCompaniesCat", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.DriversContract", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("ContractDetaill")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("DateFrom")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("DateTo")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("ID");

                    b.HasIndex("DriverId");

                    b.ToTable("DriverContract", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.DriverTracking", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CurentDTime")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("CurrentHour")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("DriverCode")
                        .HasColumnType("int");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Longtitude")
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("ID");

                    b.HasIndex("DriverID");

                    b.ToTable("DriversTracking", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.DriverTrackingOrder", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("DriverTrackingId")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Longtitude")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DriverTrackingId");

                    b.HasIndex("OrderId");

                    b.ToTable("DriversTrackingOrder", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.DriverVehicle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<string>("UsingDate")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("VehicleID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DriverID");

                    b.HasIndex("VehicleID");

                    b.ToTable("DriversVehicle", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.EvaluateAnswer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("AnsID")
                        .HasColumnType("int");

                    b.Property<string>("CurrentDate")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int?>("DriverContractId")
                        .HasColumnType("int");

                    b.Property<string>("ECode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AnsID");

                    b.HasIndex("DriverContractId");

                    b.HasIndex("QuestionId");

                    b.ToTable("EvaluateAnswers", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.EvaluateDrivers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Questions")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("ID");

                    b.ToTable("EvaluateDriver", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.GeneralWalet", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<decimal>("BalanceValue")
                        .HasColumnType("decimal(13,2)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("FlagID")
                        .HasColumnType("int");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StaffId");

                    b.HasIndex("UserID");

                    b.ToTable("GeneralWalets", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.ItemOrderOffer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("FlagOfferItem")
                        .HasColumnType("int");

                    b.Property<int>("ItemIDRef")
                        .HasColumnType("int");

                    b.Property<int>("OfferIDRef")
                        .HasColumnType("int");

                    b.Property<int>("OrderIDRef")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ItemIDRef");

                    b.HasIndex("OfferIDRef");

                    b.HasIndex("OrderIDRef");

                    b.ToTable("ItemsOrderOffer", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.Items", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("BranchesIDRef")
                        .HasColumnType("int");

                    b.Property<int>("FlagType")
                        .HasColumnType("int");

                    b.Property<decimal>("ItemCost")
                        .HasColumnType("decimal(13,2)");

                    b.Property<int>("ItemsCode")
                        .HasColumnType("int");

                    b.Property<string>("ItemsName")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("OrgsSubRef")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BranchesIDRef");

                    b.HasIndex("OrgsSubRef");

                    b.ToTable("Item", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.LatLongArrived", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("LongTitude")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("OrderRef")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OrderRef");

                    b.ToTable("LatLongArrived", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.MainOrgContact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("BranchesContact")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("OrgsSubbIDRef")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("ID");

                    b.HasIndex("BranchesContact");

                    b.HasIndex("OrgsSubbIDRef");

                    b.ToTable("MainOrgContacts", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.OfferrItems", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ItemIDef")
                        .HasColumnType("int");

                    b.Property<int>("OfferIDRef")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ItemIDef");

                    b.HasIndex("OfferIDRef");

                    b.ToTable("OfferrsItems", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.Offers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("BranchesIDRef")
                        .HasColumnType("int");

                    b.Property<int>("OffersCode")
                        .HasColumnType("int");

                    b.Property<string>("OffersDetails")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<decimal>("OffersPrice")
                        .HasColumnType("decimal(13,2)");

                    b.HasKey("ID");

                    b.HasIndex("BranchesIDRef");

                    b.ToTable("Offer", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("BranchID")
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("CurrentDate")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BranchID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Orders", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.Organizations", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("OrganizeCode")
                        .HasColumnType("int");

                    b.Property<string>("OrganizeName")
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("ID");

                    b.ToTable("Organizatio", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.OrgsSub", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Latitiude")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("Logtitude")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("OrganizationRef")
                        .HasColumnType("int");

                    b.Property<int>("OrgsSubCode")
                        .HasColumnType("int");

                    b.Property<string>("OrgsSubName")
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("ID");

                    b.HasIndex("OrganizationRef");

                    b.ToTable("OrgSub", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("PaymentWay")
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("ID");

                    b.ToTable("Payments", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.Staff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<string>("PassWord")
                        .HasColumnType("nvarchar(MAX)");

                    b.Property<int>("StaffTypeID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("ID");

                    b.HasIndex("StaffTypeID");

                    b.ToTable("Staffs", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.StaffType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("ID");

                    b.ToTable("StaffsType", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.Stock", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("FlagVal")
                        .HasColumnType("int");

                    b.Property<int>("IDRef")
                        .HasColumnType("int");

                    b.Property<int>("StockCode")
                        .HasColumnType("int");

                    b.Property<string>("StockDetails")
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("ID");

                    b.HasIndex("IDRef");

                    b.ToTable("stochs", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.SubCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationRef")
                        .HasColumnType("int");

                    b.Property<string>("SubCatName")
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("ID");

                    b.HasIndex("OrganizationRef");

                    b.ToTable("SubCategoryes", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.SubCategoryOrgsSub", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("OrgSubIDRef")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("OrgSubIDRef");

                    b.HasIndex("SubCategoryID");

                    b.ToTable("SubCategoryesOrgsSub", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.Vehicles", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("VehicleName")
                        .HasColumnType("nvarchar(MAX)");

                    b.HasKey("ID");

                    b.ToTable("Vehicle", "LabbehDB");
                });

            modelBuilder.Entity("Labbeh.Models.Answer", b =>
                {
                    b.HasOne("Labbeh.Models.EvaluateDrivers", "questionId")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.Navigation("questionId");
                });

            modelBuilder.Entity("Labbeh.Models.Branches", b =>
                {
                    b.HasOne("Labbeh.Models.OrgsSub", "orgsSub")
                        .WithMany()
                        .HasForeignKey("OrgsSubID");

                    b.Navigation("orgsSub");
                });

            modelBuilder.Entity("Labbeh.Models.BranchSubOrgsContract", b =>
                {
                    b.HasOne("Labbeh.Models.Branches", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labbeh.Models.Contract", "Contracts")
                        .WithMany()
                        .HasForeignKey("ContractID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labbeh.Models.OrgsSub", "OrgsSub")
                        .WithMany()
                        .HasForeignKey("OrgsSubID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Contracts");

                    b.Navigation("OrgsSub");
                });

            modelBuilder.Entity("Labbeh.Models.Commision", b =>
                {
                    b.HasOne("Labbeh.Models.Contract", "contract")
                        .WithMany()
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labbeh.Models.Payment", "payment")
                        .WithMany()
                        .HasForeignKey("PaymentWayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("contract");

                    b.Navigation("payment");
                });

            modelBuilder.Entity("Labbeh.Models.Contract", b =>
                {
                    b.HasOne("Labbeh.Models.OrgsSub", "orgsub")
                        .WithMany()
                        .HasForeignKey("OrgsSubIdRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("orgsub");
                });

            modelBuilder.Entity("Labbeh.Models.ContractCCat", b =>
                {
                    b.HasOne("Labbeh.Models.ContractCategory", "ContCat")
                        .WithMany()
                        .HasForeignKey("ContactCatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labbeh.Models.Contract", "Contracts")
                        .WithMany()
                        .HasForeignKey("ContractID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContCat");

                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Labbeh.Models.CustomerCusCat", b =>
                {
                    b.HasOne("Labbeh.Models.CustomerCategory", "CusCat")
                        .WithMany()
                        .HasForeignKey("CustomerCatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labbeh.Models.Customers", "Cus")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cus");

                    b.Navigation("CusCat");
                });

            modelBuilder.Entity("Labbeh.Models.DriverCompany", b =>
                {
                    b.HasOne("Labbeh.Models.DriversCompaniesCat", "DriversCompaniesCats")
                        .WithMany()
                        .HasForeignKey("DriverCompCatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriversCompaniesCats");
                });

            modelBuilder.Entity("Labbeh.Models.DriverCompContract", b =>
                {
                    b.HasOne("Labbeh.Models.DriverCompany", "DriverCompany")
                        .WithMany()
                        .HasForeignKey("DriverCompID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverCompany");
                });

            modelBuilder.Entity("Labbeh.Models.DriverContractEvaluate", b =>
                {
                    b.HasOne("Labbeh.Models.DriversContract", "driverconttact")
                        .WithMany()
                        .HasForeignKey("DriveContractID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labbeh.Models.EvaluateDrivers", "EvaluateDriver")
                        .WithMany()
                        .HasForeignKey("QEvaluateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluateDriver");

                    b.Navigation("driverconttact");
                });

            modelBuilder.Entity("Labbeh.Models.Drivers", b =>
                {
                    b.HasOne("Labbeh.Models.DriverCompany", "DriverCompany")
                        .WithMany()
                        .HasForeignKey("DriverCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labbeh.Models.DriversCompaniesCat", "DriversCompaniesCat")
                        .WithMany()
                        .HasForeignKey("DriverTTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverCompany");

                    b.Navigation("DriversCompaniesCat");
                });

            modelBuilder.Entity("Labbeh.Models.DriversContract", b =>
                {
                    b.HasOne("Labbeh.Models.Drivers", "drivers")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("drivers");
                });

            modelBuilder.Entity("Labbeh.Models.DriverTracking", b =>
                {
                    b.HasOne("Labbeh.Models.Drivers", "Drivers")
                        .WithMany()
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("Labbeh.Models.DriverTrackingOrder", b =>
                {
                    b.HasOne("Labbeh.Models.DriverTracking", "DriverTracking")
                        .WithMany()
                        .HasForeignKey("DriverTrackingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labbeh.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DriverTracking");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Labbeh.Models.DriverVehicle", b =>
                {
                    b.HasOne("Labbeh.Models.Drivers", "Drivers")
                        .WithMany()
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labbeh.Models.Vehicles", "Vehicles")
                        .WithMany()
                        .HasForeignKey("VehicleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drivers");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Labbeh.Models.EvaluateAnswer", b =>
                {
                    b.HasOne("Labbeh.Models.Answer", "ansID")
                        .WithMany()
                        .HasForeignKey("AnsID");

                    b.HasOne("Labbeh.Models.DriversContract", "driverContractId")
                        .WithMany()
                        .HasForeignKey("DriverContractId");

                    b.HasOne("Labbeh.Models.EvaluateDrivers", "questionId")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.Navigation("ansID");

                    b.Navigation("driverContractId");

                    b.Navigation("questionId");
                });

            modelBuilder.Entity("Labbeh.Models.GeneralWalet", b =>
                {
                    b.HasOne("Labbeh.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labbeh.Models.Drivers", "Drivers")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drivers");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Labbeh.Models.ItemOrderOffer", b =>
                {
                    b.HasOne("Labbeh.Models.Items", "Items")
                        .WithMany()
                        .HasForeignKey("ItemIDRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labbeh.Models.Offers", "Offers")
                        .WithMany()
                        .HasForeignKey("OfferIDRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labbeh.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderIDRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("Offers");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Labbeh.Models.Items", b =>
                {
                    b.HasOne("Labbeh.Models.Branches", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchesIDRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labbeh.Models.OrgsSub", "OrgsSub")
                        .WithMany()
                        .HasForeignKey("OrgsSubRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branches");

                    b.Navigation("OrgsSub");
                });

            modelBuilder.Entity("Labbeh.Models.LatLongArrived", b =>
                {
                    b.HasOne("Labbeh.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Labbeh.Models.MainOrgContact", b =>
                {
                    b.HasOne("Labbeh.Models.Branches", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchesContact")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labbeh.Models.OrgsSub", "OrgsSub")
                        .WithMany()
                        .HasForeignKey("OrgsSubbIDRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branches");

                    b.Navigation("OrgsSub");
                });

            modelBuilder.Entity("Labbeh.Models.OfferrItems", b =>
                {
                    b.HasOne("Labbeh.Models.Items", "Items")
                        .WithMany()
                        .HasForeignKey("ItemIDef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labbeh.Models.Offers", "Offers")
                        .WithMany()
                        .HasForeignKey("OfferIDRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Items");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Labbeh.Models.Offers", b =>
                {
                    b.HasOne("Labbeh.Models.Branches", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchesIDRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branches");
                });

            modelBuilder.Entity("Labbeh.Models.Order", b =>
                {
                    b.HasOne("Labbeh.Models.Branches", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labbeh.Models.Customers", "Customers")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branches");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Labbeh.Models.OrgsSub", b =>
                {
                    b.HasOne("Labbeh.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Labbeh.Models.Staff", b =>
                {
                    b.HasOne("Labbeh.Models.StaffType", "StaffType")
                        .WithMany()
                        .HasForeignKey("StaffTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffType");
                });

            modelBuilder.Entity("Labbeh.Models.Stock", b =>
                {
                    b.HasOne("Labbeh.Models.Items", "Items")
                        .WithMany()
                        .HasForeignKey("IDRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Labbeh.Models.SubCategory", b =>
                {
                    b.HasOne("Labbeh.Models.Organizations", "Organizations")
                        .WithMany()
                        .HasForeignKey("OrganizationRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizations");
                });

            modelBuilder.Entity("Labbeh.Models.SubCategoryOrgsSub", b =>
                {
                    b.HasOne("Labbeh.Models.OrgsSub", "OrgsSub")
                        .WithMany()
                        .HasForeignKey("OrgSubIDRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Labbeh.Models.SubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrgsSub");

                    b.Navigation("SubCategory");
                });
#pragma warning restore 612, 618
        }
    }
}
